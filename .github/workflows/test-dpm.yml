name: test-dpm
run-name: ${{ github.actor }} is running test-dpm
on: [push]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        env:
          PATCH_AUTH_TOKEN: ${{ secrets.PATCH_AUTH_TOKEN }}
          DPM_AUTH_TOKEN: ${{ secrets.DPM_AUTH_TOKEN }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT }}
          SNOWSQL_USER: ${{ secrets.SNOWSQL_USER }}
          SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD }}
          SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_SCHEMA }}
        with:
          command: test

  nodejs-test:
    name: Static TypeScript Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Run tests
        working-directory: ./static/nodejs
        run: |
          npm ci
          npm run build --if-present
          npm test

  python-test:
    name: Static Python Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install poetry
      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install dependencies
        working-directory: ./static/python
        run: |
          poetry install
      - name: Run tests
        working-directory: ./static/python
        run: |
          poetry run pytest

  lints:
    name: Format and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: dpm_agent.proto

package backends

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DpmAgent_ExecuteQuery_FullMethodName = "/dpm_agent.DpmAgent/ExecuteQuery"
)

// DpmAgentClient is the client API for DpmAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpmAgentClient interface {
	// Execute a query on the selected backend.
	ExecuteQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*QueryResult, error)
}

type dpmAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDpmAgentClient(cc grpc.ClientConnInterface) DpmAgentClient {
	return &dpmAgentClient{cc}
}

func (c *dpmAgentClient) ExecuteQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, DpmAgent_ExecuteQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpmAgentServer is the server API for DpmAgent service.
// All implementations must embed UnimplementedDpmAgentServer
// for forward compatibility
type DpmAgentServer interface {
	// Execute a query on the selected backend.
	ExecuteQuery(context.Context, *Query) (*QueryResult, error)
	mustEmbedUnimplementedDpmAgentServer()
}

// UnimplementedDpmAgentServer must be embedded to have forward compatible implementations.
type UnimplementedDpmAgentServer struct {
}

func (UnimplementedDpmAgentServer) ExecuteQuery(context.Context, *Query) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedDpmAgentServer) mustEmbedUnimplementedDpmAgentServer() {}

// UnsafeDpmAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpmAgentServer will
// result in compilation errors.
type UnsafeDpmAgentServer interface {
	mustEmbedUnimplementedDpmAgentServer()
}

func RegisterDpmAgentServer(s grpc.ServiceRegistrar, srv DpmAgentServer) {
	s.RegisterService(&DpmAgent_ServiceDesc, srv)
}

func _DpmAgent_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpmAgentServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpmAgent_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpmAgentServer).ExecuteQuery(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// DpmAgent_ServiceDesc is the grpc.ServiceDesc for DpmAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpmAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dpm_agent.DpmAgent",
	HandlerType: (*DpmAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _DpmAgent_ExecuteQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpm_agent.proto",
}

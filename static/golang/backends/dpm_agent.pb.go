// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: dpm_agent.proto

package backends

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query_Type int32

const (
	Query_DATA          Query_Type = 0
	Query_INTROSPECTION Query_Type = 1
)

// Enum value maps for Query_Type.
var (
	Query_Type_name = map[int32]string{
		0: "DATA",
		1: "INTROSPECTION",
	}
	Query_Type_value = map[string]int32{
		"DATA":          0,
		"INTROSPECTION": 1,
	}
)

func (x Query_Type) Enum() *Query_Type {
	p := new(Query_Type)
	*p = x
	return p
}

func (x Query_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[0].Descriptor()
}

func (Query_Type) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[0]
}

func (x Query_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_Type.Descriptor instead.
func (Query_Type) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 0}
}

type Query_DerivedExpression_ProjectionOperator int32

const (
	Query_DerivedExpression_YEAR        Query_DerivedExpression_ProjectionOperator = 0
	Query_DerivedExpression_MONTH       Query_DerivedExpression_ProjectionOperator = 1
	Query_DerivedExpression_DAY         Query_DerivedExpression_ProjectionOperator = 2
	Query_DerivedExpression_HOUR        Query_DerivedExpression_ProjectionOperator = 3
	Query_DerivedExpression_MINUTE      Query_DerivedExpression_ProjectionOperator = 4
	Query_DerivedExpression_SECOND      Query_DerivedExpression_ProjectionOperator = 5
	Query_DerivedExpression_MILLISECOND Query_DerivedExpression_ProjectionOperator = 6
	Query_DerivedExpression_DATE        Query_DerivedExpression_ProjectionOperator = 7
	Query_DerivedExpression_TIME        Query_DerivedExpression_ProjectionOperator = 8
	Query_DerivedExpression_WEEK        Query_DerivedExpression_ProjectionOperator = 9
	Query_DerivedExpression_DAY_OF_WEEK Query_DerivedExpression_ProjectionOperator = 10
	// The calendar date of the first day of the week.
	Query_DerivedExpression_DATE_OF_WEEK Query_DerivedExpression_ProjectionOperator = 11 // TODO: Add more.
)

// Enum value maps for Query_DerivedExpression_ProjectionOperator.
var (
	Query_DerivedExpression_ProjectionOperator_name = map[int32]string{
		0:  "YEAR",
		1:  "MONTH",
		2:  "DAY",
		3:  "HOUR",
		4:  "MINUTE",
		5:  "SECOND",
		6:  "MILLISECOND",
		7:  "DATE",
		8:  "TIME",
		9:  "WEEK",
		10: "DAY_OF_WEEK",
		11: "DATE_OF_WEEK",
	}
	Query_DerivedExpression_ProjectionOperator_value = map[string]int32{
		"YEAR":         0,
		"MONTH":        1,
		"DAY":          2,
		"HOUR":         3,
		"MINUTE":       4,
		"SECOND":       5,
		"MILLISECOND":  6,
		"DATE":         7,
		"TIME":         8,
		"WEEK":         9,
		"DAY_OF_WEEK":  10,
		"DATE_OF_WEEK": 11,
	}
)

func (x Query_DerivedExpression_ProjectionOperator) Enum() *Query_DerivedExpression_ProjectionOperator {
	p := new(Query_DerivedExpression_ProjectionOperator)
	*p = x
	return p
}

func (x Query_DerivedExpression_ProjectionOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_DerivedExpression_ProjectionOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[1].Descriptor()
}

func (Query_DerivedExpression_ProjectionOperator) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[1]
}

func (x Query_DerivedExpression_ProjectionOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_DerivedExpression_ProjectionOperator.Descriptor instead.
func (Query_DerivedExpression_ProjectionOperator) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 5, 0}
}

type Query_AggregateExpression_AggregateOperator int32

const (
	Query_AggregateExpression_MIN            Query_AggregateExpression_AggregateOperator = 0
	Query_AggregateExpression_MAX            Query_AggregateExpression_AggregateOperator = 1
	Query_AggregateExpression_MEAN           Query_AggregateExpression_AggregateOperator = 2
	Query_AggregateExpression_MEDIAN         Query_AggregateExpression_AggregateOperator = 3
	Query_AggregateExpression_COUNT          Query_AggregateExpression_AggregateOperator = 4
	Query_AggregateExpression_COUNT_DISTINCT Query_AggregateExpression_AggregateOperator = 5
	Query_AggregateExpression_SUM            Query_AggregateExpression_AggregateOperator = 6
	Query_AggregateExpression_MEAN_DISTINCT  Query_AggregateExpression_AggregateOperator = 7 // Other possible aggregators go here.
)

// Enum value maps for Query_AggregateExpression_AggregateOperator.
var (
	Query_AggregateExpression_AggregateOperator_name = map[int32]string{
		0: "MIN",
		1: "MAX",
		2: "MEAN",
		3: "MEDIAN",
		4: "COUNT",
		5: "COUNT_DISTINCT",
		6: "SUM",
		7: "MEAN_DISTINCT",
	}
	Query_AggregateExpression_AggregateOperator_value = map[string]int32{
		"MIN":            0,
		"MAX":            1,
		"MEAN":           2,
		"MEDIAN":         3,
		"COUNT":          4,
		"COUNT_DISTINCT": 5,
		"SUM":            6,
		"MEAN_DISTINCT":  7,
	}
)

func (x Query_AggregateExpression_AggregateOperator) Enum() *Query_AggregateExpression_AggregateOperator {
	p := new(Query_AggregateExpression_AggregateOperator)
	*p = x
	return p
}

func (x Query_AggregateExpression_AggregateOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_AggregateExpression_AggregateOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[2].Descriptor()
}

func (Query_AggregateExpression_AggregateOperator) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[2]
}

func (x Query_AggregateExpression_AggregateOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_AggregateExpression_AggregateOperator.Descriptor instead.
func (Query_AggregateExpression_AggregateOperator) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 6, 0}
}

type Query_BooleanExpression_BooleanOperator int32

const (
	Query_BooleanExpression_AND         Query_BooleanExpression_BooleanOperator = 0
	Query_BooleanExpression_OR          Query_BooleanExpression_BooleanOperator = 1
	Query_BooleanExpression_EQ          Query_BooleanExpression_BooleanOperator = 2
	Query_BooleanExpression_NEQ         Query_BooleanExpression_BooleanOperator = 3
	Query_BooleanExpression_LT          Query_BooleanExpression_BooleanOperator = 4
	Query_BooleanExpression_LTE         Query_BooleanExpression_BooleanOperator = 5
	Query_BooleanExpression_GT          Query_BooleanExpression_BooleanOperator = 6
	Query_BooleanExpression_GTE         Query_BooleanExpression_BooleanOperator = 7
	Query_BooleanExpression_LIKE        Query_BooleanExpression_BooleanOperator = 8
	Query_BooleanExpression_BETWEEN     Query_BooleanExpression_BooleanOperator = 9
	Query_BooleanExpression_IN          Query_BooleanExpression_BooleanOperator = 10
	Query_BooleanExpression_IS_NULL     Query_BooleanExpression_BooleanOperator = 11
	Query_BooleanExpression_IS_NOT_NULL Query_BooleanExpression_BooleanOperator = 12
	Query_BooleanExpression_HAS_ANY     Query_BooleanExpression_BooleanOperator = 13
	Query_BooleanExpression_HAS_ALL     Query_BooleanExpression_BooleanOperator = 14
)

// Enum value maps for Query_BooleanExpression_BooleanOperator.
var (
	Query_BooleanExpression_BooleanOperator_name = map[int32]string{
		0:  "AND",
		1:  "OR",
		2:  "EQ",
		3:  "NEQ",
		4:  "LT",
		5:  "LTE",
		6:  "GT",
		7:  "GTE",
		8:  "LIKE",
		9:  "BETWEEN",
		10: "IN",
		11: "IS_NULL",
		12: "IS_NOT_NULL",
		13: "HAS_ANY",
		14: "HAS_ALL",
	}
	Query_BooleanExpression_BooleanOperator_value = map[string]int32{
		"AND":         0,
		"OR":          1,
		"EQ":          2,
		"NEQ":         3,
		"LT":          4,
		"LTE":         5,
		"GT":          6,
		"GTE":         7,
		"LIKE":        8,
		"BETWEEN":     9,
		"IN":          10,
		"IS_NULL":     11,
		"IS_NOT_NULL": 12,
		"HAS_ANY":     13,
		"HAS_ALL":     14,
	}
)

func (x Query_BooleanExpression_BooleanOperator) Enum() *Query_BooleanExpression_BooleanOperator {
	p := new(Query_BooleanExpression_BooleanOperator)
	*p = x
	return p
}

func (x Query_BooleanExpression_BooleanOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_BooleanExpression_BooleanOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[3].Descriptor()
}

func (Query_BooleanExpression_BooleanOperator) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[3]
}

func (x Query_BooleanExpression_BooleanOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_BooleanExpression_BooleanOperator.Descriptor instead.
func (Query_BooleanExpression_BooleanOperator) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 7, 0}
}

type Query_OrderByExpression_Direction int32

const (
	Query_OrderByExpression_ASC  Query_OrderByExpression_Direction = 0
	Query_OrderByExpression_DESC Query_OrderByExpression_Direction = 1
)

// Enum value maps for Query_OrderByExpression_Direction.
var (
	Query_OrderByExpression_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderByExpression_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderByExpression_Direction) Enum() *Query_OrderByExpression_Direction {
	p := new(Query_OrderByExpression_Direction)
	*p = x
	return p
}

func (x Query_OrderByExpression_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderByExpression_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[4].Descriptor()
}

func (Query_OrderByExpression_Direction) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[4]
}

func (x Query_OrderByExpression_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderByExpression_Direction.Descriptor instead.
func (Query_OrderByExpression_Direction) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 9, 0}
}

type Query_JoinExpression_JoinType int32

const (
	Query_JoinExpression_LEFT_JOIN       Query_JoinExpression_JoinType = 0
	Query_JoinExpression_INNER_JOIN      Query_JoinExpression_JoinType = 1
	Query_JoinExpression_RIGHT_JOIN      Query_JoinExpression_JoinType = 2
	Query_JoinExpression_FULL_OUTER_JOIN Query_JoinExpression_JoinType = 3
)

// Enum value maps for Query_JoinExpression_JoinType.
var (
	Query_JoinExpression_JoinType_name = map[int32]string{
		0: "LEFT_JOIN",
		1: "INNER_JOIN",
		2: "RIGHT_JOIN",
		3: "FULL_OUTER_JOIN",
	}
	Query_JoinExpression_JoinType_value = map[string]int32{
		"LEFT_JOIN":       0,
		"INNER_JOIN":      1,
		"RIGHT_JOIN":      2,
		"FULL_OUTER_JOIN": 3,
	}
)

func (x Query_JoinExpression_JoinType) Enum() *Query_JoinExpression_JoinType {
	p := new(Query_JoinExpression_JoinType)
	*p = x
	return p
}

func (x Query_JoinExpression_JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_JoinExpression_JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[5].Descriptor()
}

func (Query_JoinExpression_JoinType) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[5]
}

func (x Query_JoinExpression_JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_JoinExpression_JoinType.Descriptor instead.
func (Query_JoinExpression_JoinType) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 10, 0}
}

type ClientVersion_Client int32

const (
	ClientVersion_DPM     ClientVersion_Client = 0
	ClientVersion_NODE_JS ClientVersion_Client = 1
	ClientVersion_PYTHON  ClientVersion_Client = 2
	ClientVersion_CSHARP  ClientVersion_Client = 3
)

// Enum value maps for ClientVersion_Client.
var (
	ClientVersion_Client_name = map[int32]string{
		0: "DPM",
		1: "NODE_JS",
		2: "PYTHON",
		3: "CSHARP",
	}
	ClientVersion_Client_value = map[string]int32{
		"DPM":     0,
		"NODE_JS": 1,
		"PYTHON":  2,
		"CSHARP":  3,
	}
)

func (x ClientVersion_Client) Enum() *ClientVersion_Client {
	p := new(ClientVersion_Client)
	*p = x
	return p
}

func (x ClientVersion_Client) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientVersion_Client) Descriptor() protoreflect.EnumDescriptor {
	return file_dpm_agent_proto_enumTypes[6].Descriptor()
}

func (ClientVersion_Client) Type() protoreflect.EnumType {
	return &file_dpm_agent_proto_enumTypes[6]
}

func (x ClientVersion_Client) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientVersion_Client.Descriptor instead.
func (ClientVersion_Client) EnumDescriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{2, 0}
}

// A Relational Query.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier used to fetch the configuration required to connect to the
	// cloud DB backend.
	Id *Query_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The table name.
	SelectFrom string `protobuf:"bytes,2,opt,name=selectFrom,proto3" json:"selectFrom,omitempty"`
	// The selected columns.
	Select []*Query_SelectExpression `protobuf:"bytes,3,rep,name=select,proto3" json:"select,omitempty"`
	// A filter expression.
	Filter *Query_BooleanExpression `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Group-by.
	GroupBy []*Query_GroupByExpression `protobuf:"bytes,5,rep,name=groupBy,proto3" json:"groupBy,omitempty"`
	// Order-by.
	OrderBy []*Query_OrderByExpression `protobuf:"bytes,6,rep,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit   *uint64                    `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Flag to indicate a dry-run. When set the query is only compiled but not
	// executed.
	DryRun *bool `protobuf:"varint,8,opt,name=dryRun,proto3,oneof" json:"dryRun,omitempty"`
	// Caller's version info.
	ClientVersion *ClientVersion `protobuf:"bytes,9,opt,name=clientVersion,proto3,oneof" json:"clientVersion,omitempty"`
	// Query type.
	Type *Query_Type `protobuf:"varint,10,opt,name=type,proto3,enum=dpm_agent.Query_Type,oneof" json:"type,omitempty"`
	// Joins.
	Joins []*Query_JoinExpression `protobuf:"bytes,11,rep,name=joins,proto3" json:"joins,omitempty"`
	// Table alias.
	TableAlias *string `protobuf:"bytes,12,opt,name=tableAlias,proto3,oneof" json:"tableAlias,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetId() *Query_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Query) GetSelectFrom() string {
	if x != nil {
		return x.SelectFrom
	}
	return ""
}

func (x *Query) GetSelect() []*Query_SelectExpression {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *Query) GetFilter() *Query_BooleanExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Query) GetGroupBy() []*Query_GroupByExpression {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Query) GetOrderBy() []*Query_OrderByExpression {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Query) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *Query) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *Query) GetClientVersion() *ClientVersion {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *Query) GetType() Query_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Query_DATA
}

func (x *Query) GetJoins() []*Query_JoinExpression {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *Query) GetTableAlias() string {
	if x != nil && x.TableAlias != nil {
		return *x.TableAlias
	}
	return ""
}

type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The compiled query string.
	QueryString string `protobuf:"bytes,1,opt,name=queryString,proto3" json:"queryString,omitempty"`
	// JSON-serialized result.
	JsonData string `protobuf:"bytes,2,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResult) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *QueryResult) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

// ClientVersion describes the type and semantic versions of the client
// that's making the call.
type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client ClientVersion_Client `protobuf:"varint,1,opt,name=client,proto3,enum=dpm_agent.ClientVersion_Client" json:"client,omitempty"`
	// The dataset's semantic version. Set to non-empty SemVer string by generated
	// datapackage code only; client DPM will leave this field empty.
	DatasetVersion string `protobuf:"bytes,2,opt,name=datasetVersion,proto3" json:"datasetVersion,omitempty"`
	// The client code's semantic version.
	CodeVersion string `protobuf:"bytes,3,opt,name=codeVersion,proto3" json:"codeVersion,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{2}
}

func (x *ClientVersion) GetClient() ClientVersion_Client {
	if x != nil {
		return x.Client
	}
	return ClientVersion_DPM
}

func (x *ClientVersion) GetDatasetVersion() string {
	if x != nil {
		return x.DatasetVersion
	}
	return ""
}

func (x *ClientVersion) GetCodeVersion() string {
	if x != nil {
		return x.CodeVersion
	}
	return ""
}

type Query_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdType:
	//
	//	*Query_Id_PackageId
	//	*Query_Id_SourceId
	IdType isQuery_Id_IdType `protobuf_oneof:"id_type"`
}

func (x *Query_Id) Reset() {
	*x = Query_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Id) ProtoMessage() {}

func (x *Query_Id) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Id.ProtoReflect.Descriptor instead.
func (*Query_Id) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Query_Id) GetIdType() isQuery_Id_IdType {
	if m != nil {
		return m.IdType
	}
	return nil
}

func (x *Query_Id) GetPackageId() string {
	if x, ok := x.GetIdType().(*Query_Id_PackageId); ok {
		return x.PackageId
	}
	return ""
}

func (x *Query_Id) GetSourceId() string {
	if x, ok := x.GetIdType().(*Query_Id_SourceId); ok {
		return x.SourceId
	}
	return ""
}

type isQuery_Id_IdType interface {
	isQuery_Id_IdType()
}

type Query_Id_PackageId struct {
	// Package ID.
	PackageId string `protobuf:"bytes,1,opt,name=packageId,proto3,oneof"`
}

type Query_Id_SourceId struct {
	// Source ID, used for introspection queries.
	SourceId string `protobuf:"bytes,2,opt,name=sourceId,proto3,oneof"`
}

func (*Query_Id_PackageId) isQuery_Id_IdType() {}

func (*Query_Id_SourceId) isQuery_Id_IdType() {}

type Query_SelectExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argument *Query_Expression `protobuf:"bytes,1,opt,name=argument,proto3" json:"argument,omitempty"`
	Alias    *string           `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
}

func (x *Query_SelectExpression) Reset() {
	*x = Query_SelectExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_SelectExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_SelectExpression) ProtoMessage() {}

func (x *Query_SelectExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_SelectExpression.ProtoReflect.Descriptor instead.
func (*Query_SelectExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Query_SelectExpression) GetArgument() *Query_Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *Query_SelectExpression) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

// An expression captures the various forms in which a field
// or the result of an operation on fields or literals are used
// in a query.
type Query_Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExType:
	//
	//	*Query_Expression_Field
	//	*Query_Expression_Literal
	//	*Query_Expression_Derived
	//	*Query_Expression_Aggregate
	//	*Query_Expression_Condition
	ExType isQuery_Expression_ExType `protobuf_oneof:"ex_type"`
}

func (x *Query_Expression) Reset() {
	*x = Query_Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Expression) ProtoMessage() {}

func (x *Query_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Expression.ProtoReflect.Descriptor instead.
func (*Query_Expression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Query_Expression) GetExType() isQuery_Expression_ExType {
	if m != nil {
		return m.ExType
	}
	return nil
}

func (x *Query_Expression) GetField() *Query_FieldReference {
	if x, ok := x.GetExType().(*Query_Expression_Field); ok {
		return x.Field
	}
	return nil
}

func (x *Query_Expression) GetLiteral() *Query_Literal {
	if x, ok := x.GetExType().(*Query_Expression_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *Query_Expression) GetDerived() *Query_DerivedExpression {
	if x, ok := x.GetExType().(*Query_Expression_Derived); ok {
		return x.Derived
	}
	return nil
}

func (x *Query_Expression) GetAggregate() *Query_AggregateExpression {
	if x, ok := x.GetExType().(*Query_Expression_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (x *Query_Expression) GetCondition() *Query_BooleanExpression {
	if x, ok := x.GetExType().(*Query_Expression_Condition); ok {
		return x.Condition
	}
	return nil
}

type isQuery_Expression_ExType interface {
	isQuery_Expression_ExType()
}

type Query_Expression_Field struct {
	Field *Query_FieldReference `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type Query_Expression_Literal struct {
	Literal *Query_Literal `protobuf:"bytes,2,opt,name=literal,proto3,oneof"`
}

type Query_Expression_Derived struct {
	Derived *Query_DerivedExpression `protobuf:"bytes,3,opt,name=derived,proto3,oneof"`
}

type Query_Expression_Aggregate struct {
	Aggregate *Query_AggregateExpression `protobuf:"bytes,4,opt,name=aggregate,proto3,oneof"`
}

type Query_Expression_Condition struct {
	Condition *Query_BooleanExpression `protobuf:"bytes,5,opt,name=condition,proto3,oneof"`
}

func (*Query_Expression_Field) isQuery_Expression_ExType() {}

func (*Query_Expression_Literal) isQuery_Expression_ExType() {}

func (*Query_Expression_Derived) isQuery_Expression_ExType() {}

func (*Query_Expression_Aggregate) isQuery_Expression_ExType() {}

func (*Query_Expression_Condition) isQuery_Expression_ExType() {}

type Query_FieldReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	// Name of the table containing the field.
	// Defaults to the table specified by `selectFrom`, when not set.
	TableName *string `protobuf:"bytes,2,opt,name=tableName,proto3,oneof" json:"tableName,omitempty"`
}

func (x *Query_FieldReference) Reset() {
	*x = Query_FieldReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_FieldReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_FieldReference) ProtoMessage() {}

func (x *Query_FieldReference) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_FieldReference.ProtoReflect.Descriptor instead.
func (*Query_FieldReference) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Query_FieldReference) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Query_FieldReference) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type Query_Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LiteralType:
	//
	//	*Query_Literal_String_
	//	*Query_Literal_Boolean
	//	*Query_Literal_Ui32
	//	*Query_Literal_Ui64
	//	*Query_Literal_I32
	//	*Query_Literal_I64
	//	*Query_Literal_F32
	//	*Query_Literal_F64
	//	*Query_Literal_Timestamp
	//	*Query_Literal_List_
	LiteralType isQuery_Literal_LiteralType `protobuf_oneof:"literal_type"`
}

func (x *Query_Literal) Reset() {
	*x = Query_Literal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Literal) ProtoMessage() {}

func (x *Query_Literal) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Literal.ProtoReflect.Descriptor instead.
func (*Query_Literal) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 4}
}

func (m *Query_Literal) GetLiteralType() isQuery_Literal_LiteralType {
	if m != nil {
		return m.LiteralType
	}
	return nil
}

func (x *Query_Literal) GetString_() string {
	if x, ok := x.GetLiteralType().(*Query_Literal_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Query_Literal) GetBoolean() bool {
	if x, ok := x.GetLiteralType().(*Query_Literal_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Query_Literal) GetUi32() uint32 {
	if x, ok := x.GetLiteralType().(*Query_Literal_Ui32); ok {
		return x.Ui32
	}
	return 0
}

func (x *Query_Literal) GetUi64() uint64 {
	if x, ok := x.GetLiteralType().(*Query_Literal_Ui64); ok {
		return x.Ui64
	}
	return 0
}

func (x *Query_Literal) GetI32() int32 {
	if x, ok := x.GetLiteralType().(*Query_Literal_I32); ok {
		return x.I32
	}
	return 0
}

func (x *Query_Literal) GetI64() int64 {
	if x, ok := x.GetLiteralType().(*Query_Literal_I64); ok {
		return x.I64
	}
	return 0
}

func (x *Query_Literal) GetF32() float32 {
	if x, ok := x.GetLiteralType().(*Query_Literal_F32); ok {
		return x.F32
	}
	return 0
}

func (x *Query_Literal) GetF64() float64 {
	if x, ok := x.GetLiteralType().(*Query_Literal_F64); ok {
		return x.F64
	}
	return 0
}

func (x *Query_Literal) GetTimestamp() int64 {
	if x, ok := x.GetLiteralType().(*Query_Literal_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *Query_Literal) GetList() *Query_Literal_List {
	if x, ok := x.GetLiteralType().(*Query_Literal_List_); ok {
		return x.List
	}
	return nil
}

type isQuery_Literal_LiteralType interface {
	isQuery_Literal_LiteralType()
}

type Query_Literal_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type Query_Literal_Boolean struct {
	Boolean bool `protobuf:"varint,2,opt,name=boolean,proto3,oneof"`
}

type Query_Literal_Ui32 struct {
	Ui32 uint32 `protobuf:"varint,3,opt,name=ui32,proto3,oneof"`
}

type Query_Literal_Ui64 struct {
	Ui64 uint64 `protobuf:"varint,4,opt,name=ui64,proto3,oneof"`
}

type Query_Literal_I32 struct {
	I32 int32 `protobuf:"varint,5,opt,name=i32,proto3,oneof"`
}

type Query_Literal_I64 struct {
	I64 int64 `protobuf:"varint,6,opt,name=i64,proto3,oneof"`
}

type Query_Literal_F32 struct {
	F32 float32 `protobuf:"fixed32,7,opt,name=f32,proto3,oneof"`
}

type Query_Literal_F64 struct {
	F64 float64 `protobuf:"fixed64,8,opt,name=f64,proto3,oneof"`
}

type Query_Literal_Timestamp struct {
	// Microseconds since Epoch (unix time).
	Timestamp int64 `protobuf:"varint,9,opt,name=timestamp,proto3,oneof"`
}

type Query_Literal_List_ struct {
	List *Query_Literal_List `protobuf:"bytes,10,opt,name=list,proto3,oneof"`
}

func (*Query_Literal_String_) isQuery_Literal_LiteralType() {}

func (*Query_Literal_Boolean) isQuery_Literal_LiteralType() {}

func (*Query_Literal_Ui32) isQuery_Literal_LiteralType() {}

func (*Query_Literal_Ui64) isQuery_Literal_LiteralType() {}

func (*Query_Literal_I32) isQuery_Literal_LiteralType() {}

func (*Query_Literal_I64) isQuery_Literal_LiteralType() {}

func (*Query_Literal_F32) isQuery_Literal_LiteralType() {}

func (*Query_Literal_F64) isQuery_Literal_LiteralType() {}

func (*Query_Literal_Timestamp) isQuery_Literal_LiteralType() {}

func (*Query_Literal_List_) isQuery_Literal_LiteralType() {}

type Query_DerivedExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       Query_DerivedExpression_ProjectionOperator `protobuf:"varint,1,opt,name=op,proto3,enum=dpm_agent.Query_DerivedExpression_ProjectionOperator" json:"op,omitempty"`
	Argument *Query_Expression                          `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *Query_DerivedExpression) Reset() {
	*x = Query_DerivedExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_DerivedExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_DerivedExpression) ProtoMessage() {}

func (x *Query_DerivedExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_DerivedExpression.ProtoReflect.Descriptor instead.
func (*Query_DerivedExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Query_DerivedExpression) GetOp() Query_DerivedExpression_ProjectionOperator {
	if x != nil {
		return x.Op
	}
	return Query_DerivedExpression_YEAR
}

func (x *Query_DerivedExpression) GetArgument() *Query_Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type Query_AggregateExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       Query_AggregateExpression_AggregateOperator `protobuf:"varint,1,opt,name=op,proto3,enum=dpm_agent.Query_AggregateExpression_AggregateOperator" json:"op,omitempty"`
	Argument *Query_Expression                           `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *Query_AggregateExpression) Reset() {
	*x = Query_AggregateExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_AggregateExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_AggregateExpression) ProtoMessage() {}

func (x *Query_AggregateExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_AggregateExpression.ProtoReflect.Descriptor instead.
func (*Query_AggregateExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Query_AggregateExpression) GetOp() Query_AggregateExpression_AggregateOperator {
	if x != nil {
		return x.Op
	}
	return Query_AggregateExpression_MIN
}

func (x *Query_AggregateExpression) GetArgument() *Query_Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

type Query_BooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op        Query_BooleanExpression_BooleanOperator `protobuf:"varint,1,opt,name=op,proto3,enum=dpm_agent.Query_BooleanExpression_BooleanOperator" json:"op,omitempty"`
	Arguments []*Query_Expression                     `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Query_BooleanExpression) Reset() {
	*x = Query_BooleanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_BooleanExpression) ProtoMessage() {}

func (x *Query_BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_BooleanExpression.ProtoReflect.Descriptor instead.
func (*Query_BooleanExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Query_BooleanExpression) GetOp() Query_BooleanExpression_BooleanOperator {
	if x != nil {
		return x.Op
	}
	return Query_BooleanExpression_AND
}

func (x *Query_BooleanExpression) GetArguments() []*Query_Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Query_GroupByExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExType:
	//
	//	*Query_GroupByExpression_Field
	//	*Query_GroupByExpression_Derived
	ExType isQuery_GroupByExpression_ExType `protobuf_oneof:"ex_type"`
}

func (x *Query_GroupByExpression) Reset() {
	*x = Query_GroupByExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_GroupByExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_GroupByExpression) ProtoMessage() {}

func (x *Query_GroupByExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_GroupByExpression.ProtoReflect.Descriptor instead.
func (*Query_GroupByExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 8}
}

func (m *Query_GroupByExpression) GetExType() isQuery_GroupByExpression_ExType {
	if m != nil {
		return m.ExType
	}
	return nil
}

func (x *Query_GroupByExpression) GetField() *Query_FieldReference {
	if x, ok := x.GetExType().(*Query_GroupByExpression_Field); ok {
		return x.Field
	}
	return nil
}

func (x *Query_GroupByExpression) GetDerived() *Query_DerivedExpression {
	if x, ok := x.GetExType().(*Query_GroupByExpression_Derived); ok {
		return x.Derived
	}
	return nil
}

type isQuery_GroupByExpression_ExType interface {
	isQuery_GroupByExpression_ExType()
}

type Query_GroupByExpression_Field struct {
	Field *Query_FieldReference `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type Query_GroupByExpression_Derived struct {
	Derived *Query_DerivedExpression `protobuf:"bytes,2,opt,name=derived,proto3,oneof"`
}

func (*Query_GroupByExpression_Field) isQuery_GroupByExpression_ExType() {}

func (*Query_GroupByExpression_Derived) isQuery_GroupByExpression_ExType() {}

type Query_OrderByExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argument  *Query_Expression                  `protobuf:"bytes,1,opt,name=argument,proto3" json:"argument,omitempty"`
	Direction *Query_OrderByExpression_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=dpm_agent.Query_OrderByExpression_Direction,oneof" json:"direction,omitempty"`
}

func (x *Query_OrderByExpression) Reset() {
	*x = Query_OrderByExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_OrderByExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_OrderByExpression) ProtoMessage() {}

func (x *Query_OrderByExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_OrderByExpression.ProtoReflect.Descriptor instead.
func (*Query_OrderByExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Query_OrderByExpression) GetArgument() *Query_Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *Query_OrderByExpression) GetDirection() Query_OrderByExpression_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Query_OrderByExpression_ASC
}

type Query_JoinExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinType Query_JoinExpression_JoinType `protobuf:"varint,1,opt,name=joinType,proto3,enum=dpm_agent.Query_JoinExpression_JoinType" json:"joinType,omitempty"`
	// The name of the table on the right-side of the join. The left-side is
	// specified by the `selectFrom` field.
	JoinTable string `protobuf:"bytes,3,opt,name=joinTable,proto3" json:"joinTable,omitempty"`
	// A general join condition, but this should typically be an equi-join.
	JoinCondition *Query_BooleanExpression `protobuf:"bytes,4,opt,name=joinCondition,proto3" json:"joinCondition,omitempty"`
	// Table alias for joinTable.
	TableAlias *string `protobuf:"bytes,5,opt,name=tableAlias,proto3,oneof" json:"tableAlias,omitempty"`
}

func (x *Query_JoinExpression) Reset() {
	*x = Query_JoinExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_JoinExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_JoinExpression) ProtoMessage() {}

func (x *Query_JoinExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_JoinExpression.ProtoReflect.Descriptor instead.
func (*Query_JoinExpression) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Query_JoinExpression) GetJoinType() Query_JoinExpression_JoinType {
	if x != nil {
		return x.JoinType
	}
	return Query_JoinExpression_LEFT_JOIN
}

func (x *Query_JoinExpression) GetJoinTable() string {
	if x != nil {
		return x.JoinTable
	}
	return ""
}

func (x *Query_JoinExpression) GetJoinCondition() *Query_BooleanExpression {
	if x != nil {
		return x.JoinCondition
	}
	return nil
}

func (x *Query_JoinExpression) GetTableAlias() string {
	if x != nil && x.TableAlias != nil {
		return *x.TableAlias
	}
	return ""
}

type Query_Literal_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Query_Literal `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Query_Literal_List) Reset() {
	*x = Query_Literal_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpm_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Literal_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Literal_List) ProtoMessage() {}

func (x *Query_Literal_List) ProtoReflect() protoreflect.Message {
	mi := &file_dpm_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Literal_List.ProtoReflect.Descriptor instead.
func (*Query_Literal_List) Descriptor() ([]byte, []int) {
	return file_dpm_agent_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Query_Literal_List) GetValues() []*Query_Literal {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_dpm_agent_proto protoreflect.FileDescriptor

var file_dpm_agent_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x19, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x70,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x02,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x70, 0x0a, 0x10, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xd0, 0x02,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x70,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x5f, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xda, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x36,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x66,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12,
	0x1e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xbc,
	0x02, 0x0a, 0x11, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x59,
	0x45, 0x41, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0b, 0x1a, 0x8e, 0x02,
	0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x37, 0x0a,
	0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x45, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x07, 0x1a, 0xc1,
	0x02, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54,
	0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x49, 0x4b, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e,
	0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x53, 0x5f,
	0x41, 0x4e, 0x59, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x0e, 0x1a, 0x97, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xcb, 0x01, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x1e, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x02, 0x0a, 0x0e, 0x4a,
	0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x22, 0x4e, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x45, 0x46, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x4b,
	0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x36, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x50,
	0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x53, 0x48, 0x41, 0x52, 0x50, 0x10, 0x03, 0x32, 0x46, 0x0a, 0x08, 0x44, 0x70, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x64, 0x70, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dpm_agent_proto_rawDescOnce sync.Once
	file_dpm_agent_proto_rawDescData = file_dpm_agent_proto_rawDesc
)

func file_dpm_agent_proto_rawDescGZIP() []byte {
	file_dpm_agent_proto_rawDescOnce.Do(func() {
		file_dpm_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_dpm_agent_proto_rawDescData)
	})
	return file_dpm_agent_proto_rawDescData
}

var file_dpm_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_dpm_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_dpm_agent_proto_goTypes = []interface{}{
	(Query_Type)(0), // 0: dpm_agent.Query.Type
	(Query_DerivedExpression_ProjectionOperator)(0),  // 1: dpm_agent.Query.DerivedExpression.ProjectionOperator
	(Query_AggregateExpression_AggregateOperator)(0), // 2: dpm_agent.Query.AggregateExpression.AggregateOperator
	(Query_BooleanExpression_BooleanOperator)(0),     // 3: dpm_agent.Query.BooleanExpression.BooleanOperator
	(Query_OrderByExpression_Direction)(0),           // 4: dpm_agent.Query.OrderByExpression.Direction
	(Query_JoinExpression_JoinType)(0),               // 5: dpm_agent.Query.JoinExpression.JoinType
	(ClientVersion_Client)(0),                        // 6: dpm_agent.ClientVersion.Client
	(*Query)(nil),                                    // 7: dpm_agent.Query
	(*QueryResult)(nil),                              // 8: dpm_agent.QueryResult
	(*ClientVersion)(nil),                            // 9: dpm_agent.ClientVersion
	(*Query_Id)(nil),                                 // 10: dpm_agent.Query.Id
	(*Query_SelectExpression)(nil),                   // 11: dpm_agent.Query.SelectExpression
	(*Query_Expression)(nil),                         // 12: dpm_agent.Query.Expression
	(*Query_FieldReference)(nil),                     // 13: dpm_agent.Query.FieldReference
	(*Query_Literal)(nil),                            // 14: dpm_agent.Query.Literal
	(*Query_DerivedExpression)(nil),                  // 15: dpm_agent.Query.DerivedExpression
	(*Query_AggregateExpression)(nil),                // 16: dpm_agent.Query.AggregateExpression
	(*Query_BooleanExpression)(nil),                  // 17: dpm_agent.Query.BooleanExpression
	(*Query_GroupByExpression)(nil),                  // 18: dpm_agent.Query.GroupByExpression
	(*Query_OrderByExpression)(nil),                  // 19: dpm_agent.Query.OrderByExpression
	(*Query_JoinExpression)(nil),                     // 20: dpm_agent.Query.JoinExpression
	(*Query_Literal_List)(nil),                       // 21: dpm_agent.Query.Literal.List
}
var file_dpm_agent_proto_depIdxs = []int32{
	10, // 0: dpm_agent.Query.id:type_name -> dpm_agent.Query.Id
	11, // 1: dpm_agent.Query.select:type_name -> dpm_agent.Query.SelectExpression
	17, // 2: dpm_agent.Query.filter:type_name -> dpm_agent.Query.BooleanExpression
	18, // 3: dpm_agent.Query.groupBy:type_name -> dpm_agent.Query.GroupByExpression
	19, // 4: dpm_agent.Query.orderBy:type_name -> dpm_agent.Query.OrderByExpression
	9,  // 5: dpm_agent.Query.clientVersion:type_name -> dpm_agent.ClientVersion
	0,  // 6: dpm_agent.Query.type:type_name -> dpm_agent.Query.Type
	20, // 7: dpm_agent.Query.joins:type_name -> dpm_agent.Query.JoinExpression
	6,  // 8: dpm_agent.ClientVersion.client:type_name -> dpm_agent.ClientVersion.Client
	12, // 9: dpm_agent.Query.SelectExpression.argument:type_name -> dpm_agent.Query.Expression
	13, // 10: dpm_agent.Query.Expression.field:type_name -> dpm_agent.Query.FieldReference
	14, // 11: dpm_agent.Query.Expression.literal:type_name -> dpm_agent.Query.Literal
	15, // 12: dpm_agent.Query.Expression.derived:type_name -> dpm_agent.Query.DerivedExpression
	16, // 13: dpm_agent.Query.Expression.aggregate:type_name -> dpm_agent.Query.AggregateExpression
	17, // 14: dpm_agent.Query.Expression.condition:type_name -> dpm_agent.Query.BooleanExpression
	21, // 15: dpm_agent.Query.Literal.list:type_name -> dpm_agent.Query.Literal.List
	1,  // 16: dpm_agent.Query.DerivedExpression.op:type_name -> dpm_agent.Query.DerivedExpression.ProjectionOperator
	12, // 17: dpm_agent.Query.DerivedExpression.argument:type_name -> dpm_agent.Query.Expression
	2,  // 18: dpm_agent.Query.AggregateExpression.op:type_name -> dpm_agent.Query.AggregateExpression.AggregateOperator
	12, // 19: dpm_agent.Query.AggregateExpression.argument:type_name -> dpm_agent.Query.Expression
	3,  // 20: dpm_agent.Query.BooleanExpression.op:type_name -> dpm_agent.Query.BooleanExpression.BooleanOperator
	12, // 21: dpm_agent.Query.BooleanExpression.arguments:type_name -> dpm_agent.Query.Expression
	13, // 22: dpm_agent.Query.GroupByExpression.field:type_name -> dpm_agent.Query.FieldReference
	15, // 23: dpm_agent.Query.GroupByExpression.derived:type_name -> dpm_agent.Query.DerivedExpression
	12, // 24: dpm_agent.Query.OrderByExpression.argument:type_name -> dpm_agent.Query.Expression
	4,  // 25: dpm_agent.Query.OrderByExpression.direction:type_name -> dpm_agent.Query.OrderByExpression.Direction
	5,  // 26: dpm_agent.Query.JoinExpression.joinType:type_name -> dpm_agent.Query.JoinExpression.JoinType
	17, // 27: dpm_agent.Query.JoinExpression.joinCondition:type_name -> dpm_agent.Query.BooleanExpression
	14, // 28: dpm_agent.Query.Literal.List.values:type_name -> dpm_agent.Query.Literal
	7,  // 29: dpm_agent.DpmAgent.ExecuteQuery:input_type -> dpm_agent.Query
	8,  // 30: dpm_agent.DpmAgent.ExecuteQuery:output_type -> dpm_agent.QueryResult
	30, // [30:31] is the sub-list for method output_type
	29, // [29:30] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_dpm_agent_proto_init() }
func file_dpm_agent_proto_init() {
	if File_dpm_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dpm_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_SelectExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_FieldReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Literal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_DerivedExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_AggregateExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_BooleanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_GroupByExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_OrderByExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_JoinExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpm_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Literal_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dpm_agent_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dpm_agent_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Query_Id_PackageId)(nil),
		(*Query_Id_SourceId)(nil),
	}
	file_dpm_agent_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dpm_agent_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Query_Expression_Field)(nil),
		(*Query_Expression_Literal)(nil),
		(*Query_Expression_Derived)(nil),
		(*Query_Expression_Aggregate)(nil),
		(*Query_Expression_Condition)(nil),
	}
	file_dpm_agent_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dpm_agent_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Query_Literal_String_)(nil),
		(*Query_Literal_Boolean)(nil),
		(*Query_Literal_Ui32)(nil),
		(*Query_Literal_Ui64)(nil),
		(*Query_Literal_I32)(nil),
		(*Query_Literal_I64)(nil),
		(*Query_Literal_F32)(nil),
		(*Query_Literal_F64)(nil),
		(*Query_Literal_Timestamp)(nil),
		(*Query_Literal_List_)(nil),
	}
	file_dpm_agent_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Query_GroupByExpression_Field)(nil),
		(*Query_GroupByExpression_Derived)(nil),
	}
	file_dpm_agent_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dpm_agent_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dpm_agent_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dpm_agent_proto_goTypes,
		DependencyIndexes: file_dpm_agent_proto_depIdxs,
		EnumInfos:         file_dpm_agent_proto_enumTypes,
		MessageInfos:      file_dpm_agent_proto_msgTypes,
	}.Build()
	File_dpm_agent_proto = out.File
	file_dpm_agent_proto_rawDesc = nil
	file_dpm_agent_proto_goTypes = nil
	file_dpm_agent_proto_depIdxs = nil
}

// source: dpm_agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.CompiledQuery', null, global);
goog.exportSymbol('proto.ConnectionRequest', null, global);
goog.exportSymbol('proto.ConnectionRequest.ConnectionparamsCase', null, global);
goog.exportSymbol('proto.ConnectionResponse', null, global);
goog.exportSymbol('proto.Query', null, global);
goog.exportSymbol('proto.Query.AggregateExpression', null, global);
goog.exportSymbol('proto.Query.AggregateExpression.AggregateOperator', null, global);
goog.exportSymbol('proto.Query.BooleanExpression', null, global);
goog.exportSymbol('proto.Query.BooleanExpression.BooleanOperator', null, global);
goog.exportSymbol('proto.Query.DerivedExpression', null, global);
goog.exportSymbol('proto.Query.DerivedExpression.ProjectionOperator', null, global);
goog.exportSymbol('proto.Query.Expression', null, global);
goog.exportSymbol('proto.Query.Expression.ExTypeCase', null, global);
goog.exportSymbol('proto.Query.FieldReference', null, global);
goog.exportSymbol('proto.Query.GroupByExpression', null, global);
goog.exportSymbol('proto.Query.GroupByExpression.ExTypeCase', null, global);
goog.exportSymbol('proto.Query.Literal', null, global);
goog.exportSymbol('proto.Query.Literal.List', null, global);
goog.exportSymbol('proto.Query.Literal.LiteralTypeCase', null, global);
goog.exportSymbol('proto.Query.OrderByExpression', null, global);
goog.exportSymbol('proto.Query.OrderByExpression.Direction', null, global);
goog.exportSymbol('proto.Query.SelectExpression', null, global);
goog.exportSymbol('proto.QueryResult', null, global);
goog.exportSymbol('proto.SnowflakeConnectionParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SnowflakeConnectionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SnowflakeConnectionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SnowflakeConnectionParams.displayName = 'proto.SnowflakeConnectionParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ConnectionRequest.oneofGroups_);
};
goog.inherits(proto.ConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionRequest.displayName = 'proto.ConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionResponse.displayName = 'proto.ConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Query.repeatedFields_, null);
};
goog.inherits(proto.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.displayName = 'proto.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.SelectExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query.SelectExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.SelectExpression.displayName = 'proto.Query.SelectExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Query.Expression.oneofGroups_);
};
goog.inherits(proto.Query.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.Expression.displayName = 'proto.Query.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.FieldReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query.FieldReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.FieldReference.displayName = 'proto.Query.FieldReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Query.Literal.oneofGroups_);
};
goog.inherits(proto.Query.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.Literal.displayName = 'proto.Query.Literal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.Literal.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Query.Literal.List.repeatedFields_, null);
};
goog.inherits(proto.Query.Literal.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.Literal.List.displayName = 'proto.Query.Literal.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.DerivedExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query.DerivedExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.DerivedExpression.displayName = 'proto.Query.DerivedExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.AggregateExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query.AggregateExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.AggregateExpression.displayName = 'proto.Query.AggregateExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.BooleanExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Query.BooleanExpression.repeatedFields_, null);
};
goog.inherits(proto.Query.BooleanExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.BooleanExpression.displayName = 'proto.Query.BooleanExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.GroupByExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Query.GroupByExpression.oneofGroups_);
};
goog.inherits(proto.Query.GroupByExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.GroupByExpression.displayName = 'proto.Query.GroupByExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query.OrderByExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query.OrderByExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.OrderByExpression.displayName = 'proto.Query.OrderByExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CompiledQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CompiledQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CompiledQuery.displayName = 'proto.CompiledQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.QueryResult.displayName = 'proto.QueryResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SnowflakeConnectionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.SnowflakeConnectionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SnowflakeConnectionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnowflakeConnectionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    account: jspb.Message.getFieldWithDefault(msg, 3, ""),
    database: jspb.Message.getFieldWithDefault(msg, 4, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SnowflakeConnectionParams}
 */
proto.SnowflakeConnectionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SnowflakeConnectionParams;
  return proto.SnowflakeConnectionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SnowflakeConnectionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SnowflakeConnectionParams}
 */
proto.SnowflakeConnectionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SnowflakeConnectionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SnowflakeConnectionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SnowflakeConnectionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnowflakeConnectionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.SnowflakeConnectionParams.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnowflakeConnectionParams} returns this
 */
proto.SnowflakeConnectionParams.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.SnowflakeConnectionParams.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnowflakeConnectionParams} returns this
 */
proto.SnowflakeConnectionParams.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.SnowflakeConnectionParams.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnowflakeConnectionParams} returns this
 */
proto.SnowflakeConnectionParams.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.SnowflakeConnectionParams.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnowflakeConnectionParams} returns this
 */
proto.SnowflakeConnectionParams.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string schema = 5;
 * @return {string}
 */
proto.SnowflakeConnectionParams.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnowflakeConnectionParams} returns this
 */
proto.SnowflakeConnectionParams.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ConnectionRequest.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ConnectionRequest.ConnectionparamsCase = {
  CONNECTIONPARAMS_NOT_SET: 0,
  SNOWFLAKECONNECTIONPARAMS: 1
};

/**
 * @return {proto.ConnectionRequest.ConnectionparamsCase}
 */
proto.ConnectionRequest.prototype.getConnectionparamsCase = function() {
  return /** @type {proto.ConnectionRequest.ConnectionparamsCase} */(jspb.Message.computeOneofCase(this, proto.ConnectionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    snowflakeconnectionparams: (f = msg.getSnowflakeconnectionparams()) && proto.SnowflakeConnectionParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionRequest;
  return proto.ConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SnowflakeConnectionParams;
      reader.readMessage(value,proto.SnowflakeConnectionParams.deserializeBinaryFromReader);
      msg.setSnowflakeconnectionparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnowflakeconnectionparams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SnowflakeConnectionParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional SnowflakeConnectionParams snowflakeConnectionParams = 1;
 * @return {?proto.SnowflakeConnectionParams}
 */
proto.ConnectionRequest.prototype.getSnowflakeconnectionparams = function() {
  return /** @type{?proto.SnowflakeConnectionParams} */ (
    jspb.Message.getWrapperField(this, proto.SnowflakeConnectionParams, 1));
};


/**
 * @param {?proto.SnowflakeConnectionParams|undefined} value
 * @return {!proto.ConnectionRequest} returns this
*/
proto.ConnectionRequest.prototype.setSnowflakeconnectionparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ConnectionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionRequest} returns this
 */
proto.ConnectionRequest.prototype.clearSnowflakeconnectionparams = function() {
  return this.setSnowflakeconnectionparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionRequest.prototype.hasSnowflakeconnectionparams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionResponse;
  return proto.ConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.ConnectionResponse.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionResponse} returns this
 */
proto.ConnectionResponse.prototype.setConnectionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Query.repeatedFields_ = [3,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selectfrom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    selectList: jspb.Message.toObjectList(msg.getSelectList(),
    proto.Query.SelectExpression.toObject, includeInstance),
    filter: (f = msg.getFilter()) && proto.Query.BooleanExpression.toObject(includeInstance, f),
    groupbyList: jspb.Message.toObjectList(msg.getGroupbyList(),
    proto.Query.GroupByExpression.toObject, includeInstance),
    orderbyList: jspb.Message.toObjectList(msg.getOrderbyList(),
    proto.Query.OrderByExpression.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query;
  return proto.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectfrom(value);
      break;
    case 3:
      var value = new proto.Query.SelectExpression;
      reader.readMessage(value,proto.Query.SelectExpression.deserializeBinaryFromReader);
      msg.addSelect(value);
      break;
    case 4:
      var value = new proto.Query.BooleanExpression;
      reader.readMessage(value,proto.Query.BooleanExpression.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 5:
      var value = new proto.Query.GroupByExpression;
      reader.readMessage(value,proto.Query.GroupByExpression.deserializeBinaryFromReader);
      msg.addGroupby(value);
      break;
    case 6:
      var value = new proto.Query.OrderByExpression;
      reader.readMessage(value,proto.Query.OrderByExpression.deserializeBinaryFromReader);
      msg.addOrderby(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelectfrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSelectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Query.SelectExpression.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Query.BooleanExpression.serializeBinaryToWriter
    );
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Query.GroupByExpression.serializeBinaryToWriter
    );
  }
  f = message.getOrderbyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Query.OrderByExpression.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.SelectExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.SelectExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.SelectExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.SelectExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    argument: (f = msg.getArgument()) && proto.Query.Expression.toObject(includeInstance, f),
    alias: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.SelectExpression}
 */
proto.Query.SelectExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.SelectExpression;
  return proto.Query.SelectExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.SelectExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.SelectExpression}
 */
proto.Query.SelectExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query.Expression;
      reader.readMessage(value,proto.Query.Expression.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.SelectExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.SelectExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.SelectExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.SelectExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Query.Expression.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Expression argument = 1;
 * @return {?proto.Query.Expression}
 */
proto.Query.SelectExpression.prototype.getArgument = function() {
  return /** @type{?proto.Query.Expression} */ (
    jspb.Message.getWrapperField(this, proto.Query.Expression, 1));
};


/**
 * @param {?proto.Query.Expression|undefined} value
 * @return {!proto.Query.SelectExpression} returns this
*/
proto.Query.SelectExpression.prototype.setArgument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.SelectExpression} returns this
 */
proto.Query.SelectExpression.prototype.clearArgument = function() {
  return this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.SelectExpression.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.Query.SelectExpression.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query.SelectExpression} returns this
 */
proto.Query.SelectExpression.prototype.setAlias = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.SelectExpression} returns this
 */
proto.Query.SelectExpression.prototype.clearAlias = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.SelectExpression.prototype.hasAlias = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Query.Expression.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.Query.Expression.ExTypeCase = {
  EX_TYPE_NOT_SET: 0,
  FIELD: 1,
  LITERAL: 2,
  DERIVED: 3,
  AGGREGATE: 4,
  CONDITION: 5
};

/**
 * @return {proto.Query.Expression.ExTypeCase}
 */
proto.Query.Expression.prototype.getExTypeCase = function() {
  return /** @type {proto.Query.Expression.ExTypeCase} */(jspb.Message.computeOneofCase(this, proto.Query.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: (f = msg.getField()) && proto.Query.FieldReference.toObject(includeInstance, f),
    literal: (f = msg.getLiteral()) && proto.Query.Literal.toObject(includeInstance, f),
    derived: (f = msg.getDerived()) && proto.Query.DerivedExpression.toObject(includeInstance, f),
    aggregate: (f = msg.getAggregate()) && proto.Query.AggregateExpression.toObject(includeInstance, f),
    condition: (f = msg.getCondition()) && proto.Query.BooleanExpression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.Expression}
 */
proto.Query.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.Expression;
  return proto.Query.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.Expression}
 */
proto.Query.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query.FieldReference;
      reader.readMessage(value,proto.Query.FieldReference.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    case 2:
      var value = new proto.Query.Literal;
      reader.readMessage(value,proto.Query.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 3:
      var value = new proto.Query.DerivedExpression;
      reader.readMessage(value,proto.Query.DerivedExpression.deserializeBinaryFromReader);
      msg.setDerived(value);
      break;
    case 4:
      var value = new proto.Query.AggregateExpression;
      reader.readMessage(value,proto.Query.AggregateExpression.deserializeBinaryFromReader);
      msg.setAggregate(value);
      break;
    case 5:
      var value = new proto.Query.BooleanExpression;
      reader.readMessage(value,proto.Query.BooleanExpression.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Query.FieldReference.serializeBinaryToWriter
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Query.Literal.serializeBinaryToWriter
    );
  }
  f = message.getDerived();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Query.DerivedExpression.serializeBinaryToWriter
    );
  }
  f = message.getAggregate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Query.AggregateExpression.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Query.BooleanExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional FieldReference field = 1;
 * @return {?proto.Query.FieldReference}
 */
proto.Query.Expression.prototype.getField = function() {
  return /** @type{?proto.Query.FieldReference} */ (
    jspb.Message.getWrapperField(this, proto.Query.FieldReference, 1));
};


/**
 * @param {?proto.Query.FieldReference|undefined} value
 * @return {!proto.Query.Expression} returns this
*/
proto.Query.Expression.prototype.setField = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Query.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Expression} returns this
 */
proto.Query.Expression.prototype.clearField = function() {
  return this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Expression.prototype.hasField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Literal literal = 2;
 * @return {?proto.Query.Literal}
 */
proto.Query.Expression.prototype.getLiteral = function() {
  return /** @type{?proto.Query.Literal} */ (
    jspb.Message.getWrapperField(this, proto.Query.Literal, 2));
};


/**
 * @param {?proto.Query.Literal|undefined} value
 * @return {!proto.Query.Expression} returns this
*/
proto.Query.Expression.prototype.setLiteral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Query.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Expression} returns this
 */
proto.Query.Expression.prototype.clearLiteral = function() {
  return this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Expression.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DerivedExpression derived = 3;
 * @return {?proto.Query.DerivedExpression}
 */
proto.Query.Expression.prototype.getDerived = function() {
  return /** @type{?proto.Query.DerivedExpression} */ (
    jspb.Message.getWrapperField(this, proto.Query.DerivedExpression, 3));
};


/**
 * @param {?proto.Query.DerivedExpression|undefined} value
 * @return {!proto.Query.Expression} returns this
*/
proto.Query.Expression.prototype.setDerived = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Query.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Expression} returns this
 */
proto.Query.Expression.prototype.clearDerived = function() {
  return this.setDerived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Expression.prototype.hasDerived = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AggregateExpression aggregate = 4;
 * @return {?proto.Query.AggregateExpression}
 */
proto.Query.Expression.prototype.getAggregate = function() {
  return /** @type{?proto.Query.AggregateExpression} */ (
    jspb.Message.getWrapperField(this, proto.Query.AggregateExpression, 4));
};


/**
 * @param {?proto.Query.AggregateExpression|undefined} value
 * @return {!proto.Query.Expression} returns this
*/
proto.Query.Expression.prototype.setAggregate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Query.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Expression} returns this
 */
proto.Query.Expression.prototype.clearAggregate = function() {
  return this.setAggregate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Expression.prototype.hasAggregate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BooleanExpression condition = 5;
 * @return {?proto.Query.BooleanExpression}
 */
proto.Query.Expression.prototype.getCondition = function() {
  return /** @type{?proto.Query.BooleanExpression} */ (
    jspb.Message.getWrapperField(this, proto.Query.BooleanExpression, 5));
};


/**
 * @param {?proto.Query.BooleanExpression|undefined} value
 * @return {!proto.Query.Expression} returns this
*/
proto.Query.Expression.prototype.setCondition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Query.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Expression} returns this
 */
proto.Query.Expression.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Expression.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.FieldReference.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.FieldReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.FieldReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.FieldReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.FieldReference}
 */
proto.Query.FieldReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.FieldReference;
  return proto.Query.FieldReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.FieldReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.FieldReference}
 */
proto.Query.FieldReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.FieldReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.FieldReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.FieldReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.FieldReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fieldName = 1;
 * @return {string}
 */
proto.Query.FieldReference.prototype.getFieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query.FieldReference} returns this
 */
proto.Query.FieldReference.prototype.setFieldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Query.Literal.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.Query.Literal.LiteralTypeCase = {
  LITERAL_TYPE_NOT_SET: 0,
  STRING: 1,
  BOOLEAN: 2,
  I32: 3,
  UI64: 4,
  UI32: 5,
  I64: 6,
  F32: 7,
  F64: 8,
  TIMESTAMMP: 9,
  LIST: 10
};

/**
 * @return {proto.Query.Literal.LiteralTypeCase}
 */
proto.Query.Literal.prototype.getLiteralTypeCase = function() {
  return /** @type {proto.Query.Literal.LiteralTypeCase} */(jspb.Message.computeOneofCase(this, proto.Query.Literal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    i32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ui64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ui32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    i64: jspb.Message.getFieldWithDefault(msg, 6, 0),
    f32: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    f64: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    timestammp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    list: (f = msg.getList()) && proto.Query.Literal.List.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.Literal}
 */
proto.Query.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.Literal;
  return proto.Query.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.Literal}
 */
proto.Query.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUi64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUi32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setI64(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestammp(value);
      break;
    case 10:
      var value = new proto.Query.Literal.List;
      reader.readMessage(value,proto.Query.Literal.List.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Query.Literal.List.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Query.Literal.List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.Literal.List.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.Literal.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.Literal.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Literal.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.Query.Literal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.Literal.List}
 */
proto.Query.Literal.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.Literal.List;
  return proto.Query.Literal.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.Literal.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.Literal.List}
 */
proto.Query.Literal.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query.Literal;
      reader.readMessage(value,proto.Query.Literal.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.Literal.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.Literal.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.Literal.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.Literal.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Query.Literal.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Literal values = 1;
 * @return {!Array<!proto.Query.Literal>}
 */
proto.Query.Literal.List.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.Query.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Query.Literal, 1));
};


/**
 * @param {!Array<!proto.Query.Literal>} value
 * @return {!proto.Query.Literal.List} returns this
*/
proto.Query.Literal.List.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Query.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Query.Literal}
 */
proto.Query.Literal.List.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Query.Literal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Query.Literal.List} returns this
 */
proto.Query.Literal.List.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional string string = 1;
 * @return {string}
 */
proto.Query.Literal.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 1, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool boolean = 2;
 * @return {boolean}
 */
proto.Query.Literal.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 2, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 i32 = 3;
 * @return {number}
 */
proto.Query.Literal.prototype.getI32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setI32 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearI32 = function() {
  return jspb.Message.setOneofField(this, 3, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasI32 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 ui64 = 4;
 * @return {number}
 */
proto.Query.Literal.prototype.getUi64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setUi64 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearUi64 = function() {
  return jspb.Message.setOneofField(this, 4, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasUi64 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 ui32 = 5;
 * @return {number}
 */
proto.Query.Literal.prototype.getUi32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setUi32 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearUi32 = function() {
  return jspb.Message.setOneofField(this, 5, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasUi32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 i64 = 6;
 * @return {number}
 */
proto.Query.Literal.prototype.getI64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setI64 = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearI64 = function() {
  return jspb.Message.setOneofField(this, 6, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasI64 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float f32 = 7;
 * @return {number}
 */
proto.Query.Literal.prototype.getF32 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setF32 = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearF32 = function() {
  return jspb.Message.setOneofField(this, 7, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasF32 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double f64 = 8;
 * @return {number}
 */
proto.Query.Literal.prototype.getF64 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setF64 = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearF64 = function() {
  return jspb.Message.setOneofField(this, 8, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasF64 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 timestammp = 9;
 * @return {number}
 */
proto.Query.Literal.prototype.getTimestammp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.setTimestammp = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearTimestammp = function() {
  return jspb.Message.setOneofField(this, 9, proto.Query.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasTimestammp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional List list = 10;
 * @return {?proto.Query.Literal.List}
 */
proto.Query.Literal.prototype.getList = function() {
  return /** @type{?proto.Query.Literal.List} */ (
    jspb.Message.getWrapperField(this, proto.Query.Literal.List, 10));
};


/**
 * @param {?proto.Query.Literal.List|undefined} value
 * @return {!proto.Query.Literal} returns this
*/
proto.Query.Literal.prototype.setList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.Query.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.Literal} returns this
 */
proto.Query.Literal.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.Literal.prototype.hasList = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.DerivedExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.DerivedExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.DerivedExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.DerivedExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    argument: (f = msg.getArgument()) && proto.Query.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.DerivedExpression}
 */
proto.Query.DerivedExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.DerivedExpression;
  return proto.Query.DerivedExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.DerivedExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.DerivedExpression}
 */
proto.Query.DerivedExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Query.DerivedExpression.ProjectionOperator} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.Query.Expression;
      reader.readMessage(value,proto.Query.Expression.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.DerivedExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.DerivedExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.DerivedExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.DerivedExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Query.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Query.DerivedExpression.ProjectionOperator = {
  YEAR: 0,
  MONTH: 1,
  DAY: 2,
  HOUR: 3,
  MINUTE: 4,
  SECOND: 5,
  MILLISECOND: 6,
  DATE: 7,
  TIME: 8
};

/**
 * optional ProjectionOperator op = 1;
 * @return {!proto.Query.DerivedExpression.ProjectionOperator}
 */
proto.Query.DerivedExpression.prototype.getOp = function() {
  return /** @type {!proto.Query.DerivedExpression.ProjectionOperator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Query.DerivedExpression.ProjectionOperator} value
 * @return {!proto.Query.DerivedExpression} returns this
 */
proto.Query.DerivedExpression.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Expression argument = 2;
 * @return {?proto.Query.Expression}
 */
proto.Query.DerivedExpression.prototype.getArgument = function() {
  return /** @type{?proto.Query.Expression} */ (
    jspb.Message.getWrapperField(this, proto.Query.Expression, 2));
};


/**
 * @param {?proto.Query.Expression|undefined} value
 * @return {!proto.Query.DerivedExpression} returns this
*/
proto.Query.DerivedExpression.prototype.setArgument = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.DerivedExpression} returns this
 */
proto.Query.DerivedExpression.prototype.clearArgument = function() {
  return this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.DerivedExpression.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.AggregateExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.AggregateExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.AggregateExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.AggregateExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    argument: (f = msg.getArgument()) && proto.Query.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.AggregateExpression}
 */
proto.Query.AggregateExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.AggregateExpression;
  return proto.Query.AggregateExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.AggregateExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.AggregateExpression}
 */
proto.Query.AggregateExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Query.AggregateExpression.AggregateOperator} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.Query.Expression;
      reader.readMessage(value,proto.Query.Expression.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.AggregateExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.AggregateExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.AggregateExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.AggregateExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Query.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Query.AggregateExpression.AggregateOperator = {
  MIN: 0,
  MAX: 1,
  MEAN: 2,
  MEDIAN: 3,
  COUNT: 4,
  COUNT_DISTINCT: 5,
  SUM: 6
};

/**
 * optional AggregateOperator op = 1;
 * @return {!proto.Query.AggregateExpression.AggregateOperator}
 */
proto.Query.AggregateExpression.prototype.getOp = function() {
  return /** @type {!proto.Query.AggregateExpression.AggregateOperator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Query.AggregateExpression.AggregateOperator} value
 * @return {!proto.Query.AggregateExpression} returns this
 */
proto.Query.AggregateExpression.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Expression argument = 2;
 * @return {?proto.Query.Expression}
 */
proto.Query.AggregateExpression.prototype.getArgument = function() {
  return /** @type{?proto.Query.Expression} */ (
    jspb.Message.getWrapperField(this, proto.Query.Expression, 2));
};


/**
 * @param {?proto.Query.Expression|undefined} value
 * @return {!proto.Query.AggregateExpression} returns this
*/
proto.Query.AggregateExpression.prototype.setArgument = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.AggregateExpression} returns this
 */
proto.Query.AggregateExpression.prototype.clearArgument = function() {
  return this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.AggregateExpression.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Query.BooleanExpression.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.BooleanExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.BooleanExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.BooleanExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.BooleanExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.Query.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.BooleanExpression}
 */
proto.Query.BooleanExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.BooleanExpression;
  return proto.Query.BooleanExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.BooleanExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.BooleanExpression}
 */
proto.Query.BooleanExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Query.BooleanExpression.BooleanOperator} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.Query.Expression;
      reader.readMessage(value,proto.Query.Expression.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.BooleanExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.BooleanExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.BooleanExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.BooleanExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Query.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Query.BooleanExpression.BooleanOperator = {
  AND: 0,
  OR: 1,
  EQ: 3,
  NEQ: 4,
  LT: 5,
  LTE: 6,
  GT: 7,
  GTE: 8,
  LIKE: 9,
  BETWEEN: 10,
  IN: 11
};

/**
 * optional BooleanOperator op = 1;
 * @return {!proto.Query.BooleanExpression.BooleanOperator}
 */
proto.Query.BooleanExpression.prototype.getOp = function() {
  return /** @type {!proto.Query.BooleanExpression.BooleanOperator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Query.BooleanExpression.BooleanOperator} value
 * @return {!proto.Query.BooleanExpression} returns this
 */
proto.Query.BooleanExpression.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Expression arguments = 2;
 * @return {!Array<!proto.Query.Expression>}
 */
proto.Query.BooleanExpression.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.Query.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Query.Expression, 2));
};


/**
 * @param {!Array<!proto.Query.Expression>} value
 * @return {!proto.Query.BooleanExpression} returns this
*/
proto.Query.BooleanExpression.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Query.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Query.Expression}
 */
proto.Query.BooleanExpression.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Query.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Query.BooleanExpression} returns this
 */
proto.Query.BooleanExpression.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Query.GroupByExpression.oneofGroups_ = [[1,3]];

/**
 * @enum {number}
 */
proto.Query.GroupByExpression.ExTypeCase = {
  EX_TYPE_NOT_SET: 0,
  FIELD: 1,
  DERIVED: 3
};

/**
 * @return {proto.Query.GroupByExpression.ExTypeCase}
 */
proto.Query.GroupByExpression.prototype.getExTypeCase = function() {
  return /** @type {proto.Query.GroupByExpression.ExTypeCase} */(jspb.Message.computeOneofCase(this, proto.Query.GroupByExpression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.GroupByExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.GroupByExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.GroupByExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.GroupByExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: (f = msg.getField()) && proto.Query.FieldReference.toObject(includeInstance, f),
    derived: (f = msg.getDerived()) && proto.Query.DerivedExpression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.GroupByExpression}
 */
proto.Query.GroupByExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.GroupByExpression;
  return proto.Query.GroupByExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.GroupByExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.GroupByExpression}
 */
proto.Query.GroupByExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query.FieldReference;
      reader.readMessage(value,proto.Query.FieldReference.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    case 3:
      var value = new proto.Query.DerivedExpression;
      reader.readMessage(value,proto.Query.DerivedExpression.deserializeBinaryFromReader);
      msg.setDerived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.GroupByExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.GroupByExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.GroupByExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.GroupByExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Query.FieldReference.serializeBinaryToWriter
    );
  }
  f = message.getDerived();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Query.DerivedExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional FieldReference field = 1;
 * @return {?proto.Query.FieldReference}
 */
proto.Query.GroupByExpression.prototype.getField = function() {
  return /** @type{?proto.Query.FieldReference} */ (
    jspb.Message.getWrapperField(this, proto.Query.FieldReference, 1));
};


/**
 * @param {?proto.Query.FieldReference|undefined} value
 * @return {!proto.Query.GroupByExpression} returns this
*/
proto.Query.GroupByExpression.prototype.setField = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Query.GroupByExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.GroupByExpression} returns this
 */
proto.Query.GroupByExpression.prototype.clearField = function() {
  return this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.GroupByExpression.prototype.hasField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DerivedExpression derived = 3;
 * @return {?proto.Query.DerivedExpression}
 */
proto.Query.GroupByExpression.prototype.getDerived = function() {
  return /** @type{?proto.Query.DerivedExpression} */ (
    jspb.Message.getWrapperField(this, proto.Query.DerivedExpression, 3));
};


/**
 * @param {?proto.Query.DerivedExpression|undefined} value
 * @return {!proto.Query.GroupByExpression} returns this
*/
proto.Query.GroupByExpression.prototype.setDerived = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Query.GroupByExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.GroupByExpression} returns this
 */
proto.Query.GroupByExpression.prototype.clearDerived = function() {
  return this.setDerived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.GroupByExpression.prototype.hasDerived = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.OrderByExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.OrderByExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query.OrderByExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.OrderByExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    argument: (f = msg.getArgument()) && proto.Query.Expression.toObject(includeInstance, f),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query.OrderByExpression}
 */
proto.Query.OrderByExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query.OrderByExpression;
  return proto.Query.OrderByExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query.OrderByExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query.OrderByExpression}
 */
proto.Query.OrderByExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query.Expression;
      reader.readMessage(value,proto.Query.Expression.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    case 2:
      var value = /** @type {!proto.Query.OrderByExpression.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.OrderByExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.OrderByExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query.OrderByExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.OrderByExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Query.Expression.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Query.OrderByExpression.Direction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Query.OrderByExpression.Direction = {
  ASC: 0,
  DESC: 1
};

/**
 * optional Expression argument = 1;
 * @return {?proto.Query.Expression}
 */
proto.Query.OrderByExpression.prototype.getArgument = function() {
  return /** @type{?proto.Query.Expression} */ (
    jspb.Message.getWrapperField(this, proto.Query.Expression, 1));
};


/**
 * @param {?proto.Query.Expression|undefined} value
 * @return {!proto.Query.OrderByExpression} returns this
*/
proto.Query.OrderByExpression.prototype.setArgument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query.OrderByExpression} returns this
 */
proto.Query.OrderByExpression.prototype.clearArgument = function() {
  return this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.OrderByExpression.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Direction direction = 2;
 * @return {!proto.Query.OrderByExpression.Direction}
 */
proto.Query.OrderByExpression.prototype.getDirection = function() {
  return /** @type {!proto.Query.OrderByExpression.Direction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Query.OrderByExpression.Direction} value
 * @return {!proto.Query.OrderByExpression} returns this
 */
proto.Query.OrderByExpression.prototype.setDirection = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query.OrderByExpression} returns this
 */
proto.Query.OrderByExpression.prototype.clearDirection = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.OrderByExpression.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.Query.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.setConnectionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string selectFrom = 2;
 * @return {string}
 */
proto.Query.prototype.getSelectfrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.setSelectfrom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SelectExpression select = 3;
 * @return {!Array<!proto.Query.SelectExpression>}
 */
proto.Query.prototype.getSelectList = function() {
  return /** @type{!Array<!proto.Query.SelectExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Query.SelectExpression, 3));
};


/**
 * @param {!Array<!proto.Query.SelectExpression>} value
 * @return {!proto.Query} returns this
*/
proto.Query.prototype.setSelectList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Query.SelectExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Query.SelectExpression}
 */
proto.Query.prototype.addSelect = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Query.SelectExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.clearSelectList = function() {
  return this.setSelectList([]);
};


/**
 * optional BooleanExpression filter = 4;
 * @return {?proto.Query.BooleanExpression}
 */
proto.Query.prototype.getFilter = function() {
  return /** @type{?proto.Query.BooleanExpression} */ (
    jspb.Message.getWrapperField(this, proto.Query.BooleanExpression, 4));
};


/**
 * @param {?proto.Query.BooleanExpression|undefined} value
 * @return {!proto.Query} returns this
*/
proto.Query.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated GroupByExpression groupBy = 5;
 * @return {!Array<!proto.Query.GroupByExpression>}
 */
proto.Query.prototype.getGroupbyList = function() {
  return /** @type{!Array<!proto.Query.GroupByExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Query.GroupByExpression, 5));
};


/**
 * @param {!Array<!proto.Query.GroupByExpression>} value
 * @return {!proto.Query} returns this
*/
proto.Query.prototype.setGroupbyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Query.GroupByExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Query.GroupByExpression}
 */
proto.Query.prototype.addGroupby = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Query.GroupByExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * repeated OrderByExpression orderBy = 6;
 * @return {!Array<!proto.Query.OrderByExpression>}
 */
proto.Query.prototype.getOrderbyList = function() {
  return /** @type{!Array<!proto.Query.OrderByExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Query.OrderByExpression, 6));
};


/**
 * @param {!Array<!proto.Query.OrderByExpression>} value
 * @return {!proto.Query} returns this
*/
proto.Query.prototype.setOrderbyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Query.OrderByExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Query.OrderByExpression}
 */
proto.Query.prototype.addOrderby = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Query.OrderByExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.clearOrderbyList = function() {
  return this.setOrderbyList([]);
};


/**
 * optional uint64 limit = 7;
 * @return {number}
 */
proto.Query.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Query.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CompiledQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.CompiledQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CompiledQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompiledQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CompiledQuery}
 */
proto.CompiledQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CompiledQuery;
  return proto.CompiledQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CompiledQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CompiledQuery}
 */
proto.CompiledQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CompiledQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CompiledQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CompiledQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompiledQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.CompiledQuery.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CompiledQuery} returns this
 */
proto.CompiledQuery.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jsondata: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryResult}
 */
proto.QueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryResult;
  return proto.QueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryResult}
 */
proto.QueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuerystring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJsondata();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string queryString = 1;
 * @return {string}
 */
proto.QueryResult.prototype.getQuerystring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.QueryResult} returns this
 */
proto.QueryResult.prototype.setQuerystring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jsonData = 2;
 * @return {string}
 */
proto.QueryResult.prototype.getJsondata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.QueryResult} returns this
 */
proto.QueryResult.prototype.setJsondata = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
